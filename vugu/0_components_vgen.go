package main

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vjson"
import "github.com/vugu/vugu"
import js "github.com/vugu/vugu/js"

import (
	//"time"

	"github.com/json-iterator/go"
	"github.com/peterhellberg/sseclient"
)

const (
	events		= "https://events.home.rsmachiner.com/stream/home/smoker-pi/readings"
	controls	= "https://control-hub.home.rsmachiner.com/config/home/smoker-pi/configs"
)

var json = jsoniter.ConfigCompatibleWithStandardLibrary

type Root struct {
	Stream stream `vugu:"data"`
}

type stream struct {
	Initialized	bool
	Data		string
	Faren		float32
	Cels		float32
}

type Update struct {
	Data	struct {
		ID	string	`json:"id"`
		F	float32	`json:"f"`
		C	float32	`json:"c"`
	}	`json:"data"`
	Timestamp	int64	`json:"timestamp"`
}

func (r *Root) HandleStreamInit(event *vugu.DOMEvent) {
	r.Stream = stream{}
	ee := event.EventEnv()
	//ticker := time.NewTicker(1000 * time.Millisecond)
	go func() {
		//var count int
		eventUpdates, _ := sseclient.OpenURL(events)
		var update Update
		for event := range eventUpdates {
			body, _ := json.Marshal(event.Data)
			json.Unmarshal(body, &update)
			ee.Lock()
			r.Stream.Data = update.Data.ID
			r.Stream.Faren = update.Data.F
			r.Stream.Cels = update.Data.C
			ee.UnlockRender()
		}
		/*for {
		    select {
		    case  <-ticker.C:

		        r.Stream.Initialized = true
		        ee.Lock()
		        count = count +1
		        r.Stream.Data = strconv.Itoa(count)
		        ee.UnlockRender()
		    }
		}*/
	}()
}
func (c *Root) Build(vgin *vugu.BuildIn) (vgout *vugu.BuildOut) {

	vgout = &vugu.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *vugu.VGNode
	vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute(nil)}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "main", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "role", Val: "main"}, vugu.VGAttribute{Namespace: "", Key: "class", Val: "container text-center"}}}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    "}
			vgparent.AppendChild(vgn)
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mt-5"}}}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "h1", Attr: []vugu.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				{
					vghtml := fmt.Sprint("Data Stream Here")
					vgn.InnerHTML = &vghtml
				}
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				if !c.Stream.Initialized {
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "p", Attr: []vugu.VGAttribute(nil)}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Waiting for data..."}
						vgparent.AppendChild(vgn)
					}
				}
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				if c.Stream.Initialized {
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "p", Attr: []vugu.VGAttribute(nil)}
					vgparent.AppendChild(vgn)
					{
						vghtml := fmt.Sprint(c.Stream.Data)
						vgn.InnerHTML = &vghtml
					}
				}
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    "}
				vgparent.AppendChild(vgn)
			}
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    "}
			vgparent.AppendChild(vgn)
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "button", Attr: []vugu.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
				EventType:	"click",
				Func:		func(event *vugu.DOMEvent) { c.HandleStreamInit(event) },
				// TODO: implement capture, etc. mostly need to decide syntax
			})
			{
				vgparent := vgn
				_ = vgparent
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Start Data Stream"}
				vgparent.AppendChild(vgn)
			}
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    "}
			vgparent.AppendChild(vgn)
		}
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n"}
		vgparent.AppendChild(vgn)
	}
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ vjson.RawMessage
var _ js.Value
