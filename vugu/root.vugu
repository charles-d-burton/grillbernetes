<html>
	<link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
	<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
	
<div class="mdl-grid">
	<div class="mdl-card mdl-shadow--6dp">
		<div class="mdl-card__title mdl-color--primary mdl-color-text--white relative">
			<h2 class="mdl-card__title-text">K8S Kitchen Login</h2>
		</div>

		<div class="mdl-card__supporting-text">
			<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
				<vgform:Input type="email" :Value='vgform.StringPtr{&c.LoginBoxValue}' required="required" class="mdl-textfield__input" id="login" placeholder="Login"></vgform:Input>
				<label class="mdl-textfield__label" for="login" ></label>
			</div>
			<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
				<vgform:Input type="password" :Value='vgform.StringPtr{&c.PasswordValue}'  class="mdl-textfield__input" placeholder="Password" required="required" ></vgform:Input>
				<label class="mdl-textfield__label" for="password"></label>
			</div>
		</div>

		<div class="mdl-card__actions mdl-card--border">
			<div class="mdl-grid">
				<button @click='c.LoginButtonEvent(event)' class="mdl-cell mdl-cell--12-col mdl-button mdl-button--raised mdl-button--colored mdl-js-button mdl-js-ripple-effect mdl-color-text--white">
					Login
				</button>

			</div>

			<div class="mdl-grid">
				<div class="mdl-cell mdl-cell--12-col">
					<a onClick='flip("show-left")' class="mdl-color-text--primary">Sign up!</a>
					<a onClick='flip("show-bottom")' class="mdl-color-text--primary" style="float: right">Lost
						Password?</a>
				</div>
			</div>
		</div>
	</div>


	<div class="mdl-card mdl-shadow--6dp">
		<div class="mdl-card__title mdl-color--primary mdl-color-text--white relative">
			<a class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon"
				onClick='flip("show-front")'>
				<i class="material-icons">arrow_back</i>
			</a>
			<h2 class="mdl-card__title-text">Sign up</h2>
		</div>


		<div class="mdl-card__supporting-text">
			<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
				<input class="mdl-textfield__input" id="login"/>
				<label class="mdl-textfield__label" for="login">Login</label>
			</div>
			<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
				<input class="mdl-textfield__input" type="password" id="password"/>
				<label class="mdl-textfield__label" for="password">Password</label>
			</div>

			<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
				<input class="mdl-textfield__input" type="password" id="password2"/>
				<label class="mdl-textfield__label" for="password2">Password repeat</label>
			</div>
		</div>

		<div class="mdl-card__actions mdl-card--border">
			<div class="mdl-grid">
				<button class="mdl-cell mdl-cell--12-col mdl-button mdl-button--raised mdl-button--colored mdl-js-button mdl-js-ripple-effect mdl-color-text--white">
					Sign up
				</button>
			</div>
		</div>
	</div>

	
	<div class="mdl-card mdl-shadow--6dp">
		<div class="mdl-card__title mdl-color--primary mdl-color-text--white relative">
			<a class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon"
				onClick='flip("show-front")'>
				<i class="material-icons">arrow_back</i>
			</a>
			<h2 class="mdl-card__title-text">Lost Password</h2>
		</div>


		<div class="mdl-card__supporting-text">
			<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
				<input class="mdl-textfield__input" type="email" id="email"/>
				<label class="mdl-textfield__label" for="email">E-Mail</label>
			</div>
		</div>

		<div class="mdl-card__actions mdl-card--border">
			<div class="mdl-grid">
				<button class="mdl-cell mdl-cell--12-col mdl-button mdl-button--raised mdl-button--colored mdl-js-button mdl-js-ripple-effect mdl-color-text--white">
					Reset Password
				</button>
			</div>
		</div>
	</div>
</div>
</html>
<style>
body {
  display: flex;
  align-items: center;
  justify-content: center;
}
</style>

<script type="application/x-go">

import (
    "fmt"
	"encoding/json"
	"bytes"
	"net/http"
	"io/ioutil"
    "github.com/peterhellberg/sseclient"
	"github.com/vugu/vugu/vgform"
)

const (
    events = "https://events.home.rsmachiner.com/stream/home/smoker-pi/readings"
    controls = "https://control-hub.home.rsmachiner.com/config/home/smoker-pi/configs"
	auth =  "https://auth.home.rsmachiner.com/login"
	aToken = "accessToken"
	rToken = "refreshToken"
	uname = "username"
)

type Root struct {
    Stream stream `vugu:"data"`
	LoginBoxValue string
	PasswordValue string
}

type stream struct {
    Initialized bool
    Data string
    Faren float32
    Cels float32
}

type Update struct {
	Data struct {
		ID string  `json:"id"`
		F  float32 `json:"f"`
		C  float32 `json:"c"`
	} `json:"data"`
	Timestamp int64 `json:"timestamp"`
}

func (r *Root) HandleStreamInit(event vugu.DOMEvent) {
    r.Stream = stream{}
    ee := event.EventEnv()
    go func() {
        eventUpdates, _ := sseclient.OpenURL(events)
        var update Update
        for event := range eventUpdates {
            body, err := json.Marshal(event.Data)
            if err != nil {
                fmt.Println(err)
            }
            r.Stream.Initialized = true
            json.Unmarshal(body, &update)
            fmt.Println(update)
            ee.Lock()
            r.Stream.Data = update.Data.ID
            r.Stream.Faren = update.Data.F
            r.Stream.Cels = update.Data.C
            ee.UnlockRender()
        }
    }()
}

func (r *Root) LoginButtonEvent(e vugu.DOMEvent) {
	type User struct {
		AccessToken *string
		RefreshToken *string
		ID string
    }

	if r.LoginBoxValue == "" || r.PasswordValue == "" {
		fmt.Println("Login and Password not set")
		return
	}
	go func() {
		
		/*if input.RefreshToken != nil {
			values["refresh_token"] = *input.RefreshToken
		}*/
		type loginStruct struct {
			Username string `json:"username"`
			Password string `json:"password"`
		}
		//fmt.Println("Pushed login button")
		//fmt.Printf("Got Login: %v\n", r.LoginBoxValue)
		//fmt.Printf("Got Password: %v\n", r.PasswordValue)
		var login loginStruct
		login.Username = r.LoginBoxValue
		login.Password = r.PasswordValue
		data, err := json.Marshal(&login)
		if err != nil {
			fmt.Println(err)
		}
		req, _ := http.NewRequest("POST", auth, bytes.NewBuffer(data))
		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			fmt.Println("response error")
			fmt.Println(err)
			return
		}
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Println(err)
			return
		}
		//fmt.Print("BODY:")
		//fmt.Println(string(body))
		var ident AuthManager
		err = json.Unmarshal(body, &ident)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println(ident.AuthenticationResult.ExpiresIn)
		setLocal(aToken, ident.AuthenticationResult.AccessToken)
		setLocal(rToken, ident.AuthenticationResult.RefreshToken)
		setLocal(uname, r.LoginBoxValue)
		ident.SetExpire(ident.AuthenticationResult.ExpiresIn)
		fmt.Println(getLocalString(aToken))
		ident.Start()
	}()
}


func (r *Root) SignupButtonEvent(e vugu.DOMEvent) {

}

func (r *Root) LostPasswordButtonEvent(e vugu.DOMEvent) {
	
}
</script>
