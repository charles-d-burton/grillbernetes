package main

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vjson"
import "github.com/vugu/vugu"
import js "github.com/vugu/vugu/js"

import (
	"bytes"
	"encoding/json"

	"github.com/peterhellberg/sseclient"
	"github.com/vugu/vugu/vgform"
	"io/ioutil"
	"net/http"
)

const (
	events		= "https://events.home.rsmachiner.com/stream/home/smoker-pi/readings"
	controls	= "https://control-hub.home.rsmachiner.com/config/home/smoker-pi/configs"
	auth		= "https://auth.home.rsmachiner.com/login"
	aToken		= "accessToken"
	rToken		= "refreshToken"
	uname		= "username"
)

type Root struct {
	Stream		stream	`vugu:"data"`
	LoginBoxValue	string
	PasswordValue	string
}

type stream struct {
	Initialized	bool
	Data		string
	Faren		float32
	Cels		float32
}

type Update struct {
	Data	struct {
		ID	string	`json:"id"`
		F	float32	`json:"f"`
		C	float32	`json:"c"`
	}	`json:"data"`
	Timestamp	int64	`json:"timestamp"`
}

func (r *Root) HandleStreamInit(event vugu.DOMEvent) {
	r.Stream = stream{}
	ee := event.EventEnv()
	go func() {
		eventUpdates, _ := sseclient.OpenURL(events)
		var update Update
		for event := range eventUpdates {
			body, err := json.Marshal(event.Data)
			if err != nil {
				fmt.Println(err)
			}
			r.Stream.Initialized = true
			json.Unmarshal(body, &update)
			fmt.Println(update)
			ee.Lock()
			r.Stream.Data = update.Data.ID
			r.Stream.Faren = update.Data.F
			r.Stream.Cels = update.Data.C
			ee.UnlockRender()
		}
	}()
}

func (r *Root) LoginButtonEvent(e vugu.DOMEvent) {
	type User struct {
		AccessToken	*string
		RefreshToken	*string
		ID		string
	}

	if r.LoginBoxValue == "" || r.PasswordValue == "" {
		fmt.Println("Login and Password not set")
		return
	}
	go func() {

		/*if input.RefreshToken != nil {
			values["refresh_token"] = *input.RefreshToken
		}*/
		type loginStruct struct {
			Username	string	`json:"username"`
			Password	string	`json:"password"`
		}
		//fmt.Println("Pushed login button")
		//fmt.Printf("Got Login: %v\n", r.LoginBoxValue)
		//fmt.Printf("Got Password: %v\n", r.PasswordValue)
		var login loginStruct
		login.Username = r.LoginBoxValue
		login.Password = r.PasswordValue
		data, err := json.Marshal(&login)
		if err != nil {
			fmt.Println(err)
		}
		req, _ := http.NewRequest("POST", auth, bytes.NewBuffer(data))
		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			fmt.Println("response error")
			fmt.Println(err)
			return
		}
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Println(err)
			return
		}
		//fmt.Print("BODY:")
		//fmt.Println(string(body))
		var ident AuthManager
		err = json.Unmarshal(body, &ident)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println(ident.AuthenticationResult.ExpiresIn)
		setLocal(aToken, ident.AuthenticationResult.AccessToken)
		setLocal(rToken, ident.AuthenticationResult.RefreshToken)
		setLocal(uname, r.LoginBoxValue)
		ident.SetExpire(ident.AuthenticationResult.ExpiresIn)
		fmt.Println(getLocalString(aToken))
		ident.Start()
	}()
}

func (r *Root) SignupButtonEvent(e vugu.DOMEvent) {

}

func (r *Root) LostPasswordButtonEvent(e vugu.DOMEvent) {

}
func (c *Root) Build(vgin *vugu.BuildIn) (vgout *vugu.BuildOut) {

	vgout = &vugu.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *vugu.VGNode
	vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "html", Attr: []vugu.VGAttribute(nil)}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "head", Attr: []vugu.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "link", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "rel", Val: "stylesheet"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://code.getmdl.io/1.3.0/material.indigo-pink.min.css"}}}
			vgout.AppendCSS(vgn)
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t"}
			vgparent.AppendChild(vgn)
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "link", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "rel", Val: "stylesheet"}, vugu.VGAttribute{Namespace: "", Key: "href", Val: "https://fonts.googleapis.com/icon?family=Material+Icons"}}}
			vgout.AppendCSS(vgn)
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\n"}
			vgparent.AppendChild(vgn)
		}
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "body", Attr: []vugu.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-grid"}}}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t"}
				vgparent.AppendChild(vgn)
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-card mdl-shadow--6dp"}}}
				vgparent.AppendChild(vgn)
				{
					vgparent := vgn
					_ = vgparent
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t"}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-card__title mdl-color--primary mdl-color-text--white relative"}}}
					vgparent.AppendChild(vgn)
					vgn.SetInnerHTML(vugu.HTML("\n\t\t\t\x3Ch2 class=\"mdl-card__title-text\"\x3EK8S Kitchen Login\x3C/h2\x3E\n\t\t"))
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\t\t"}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-card__supporting-text"}}}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t"}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-textfield mdl-js-textfield mdl-textfield--floating-label"}}}
						vgparent.AppendChild(vgn)
						{
							vgparent := vgn
							_ = vgparent
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t\t"}
							vgparent.AppendChild(vgn)
							{
								vgcompKey := vugu.MakeCompKey(0x2EE7D65B9CDEAFAF^vgin.CurrentPositionHash(), vgiterkey)
								// ask BuildEnv for prior instance of this specific component
								vgcomp, _ := vgin.BuildEnv.CachedComponent(vgcompKey).(*vgform.Input)
								if vgcomp == nil {
									// create new one if needed
									vgcomp = new(vgform.Input)
									vgin.BuildEnv.WireComponent(vgcomp)
								}
								vgin.BuildEnv.UseComponent(vgcompKey, vgcomp)	// ensure we can use this in the cache next time around
								vgcomp.Value = vgform.StringPtr{&c.LoginBoxValue}
								vgcomp.AttrMap = make(map[string]interface{}, 8)
								vgcomp.AttrMap["type"] = "email"
								vgcomp.AttrMap["required"] = "required"
								vgcomp.AttrMap["class"] = "mdl-textfield__input"
								vgcomp.AttrMap["id"] = "login"
								vgcomp.AttrMap["placeholder"] = "Login"
								vgout.Components = append(vgout.Components, vgcomp)
								vgn = &vugu.VGNode{Component: vgcomp}
								vgparent.AppendChild(vgn)
							}
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t\t"}
							vgparent.AppendChild(vgn)
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "label", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-textfield__label"}, vugu.VGAttribute{Namespace: "", Key: "for", Val: "login"}}}
							vgparent.AppendChild(vgn)
							vgn.SetInnerHTML(vugu.HTML(""))
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t"}
							vgparent.AppendChild(vgn)
						}
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t"}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-textfield mdl-js-textfield mdl-textfield--floating-label"}}}
						vgparent.AppendChild(vgn)
						{
							vgparent := vgn
							_ = vgparent
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t\t"}
							vgparent.AppendChild(vgn)
							{
								vgcompKey := vugu.MakeCompKey(0xB0C7A97EB30A2991^vgin.CurrentPositionHash(), vgiterkey)
								// ask BuildEnv for prior instance of this specific component
								vgcomp, _ := vgin.BuildEnv.CachedComponent(vgcompKey).(*vgform.Input)
								if vgcomp == nil {
									// create new one if needed
									vgcomp = new(vgform.Input)
									vgin.BuildEnv.WireComponent(vgcomp)
								}
								vgin.BuildEnv.UseComponent(vgcompKey, vgcomp)	// ensure we can use this in the cache next time around
								vgcomp.Value = vgform.StringPtr{&c.PasswordValue}
								vgcomp.AttrMap = make(map[string]interface{}, 8)
								vgcomp.AttrMap["type"] = "password"
								vgcomp.AttrMap["class"] = "mdl-textfield__input"
								vgcomp.AttrMap["placeholder"] = "Password"
								vgcomp.AttrMap["required"] = "required"
								vgout.Components = append(vgout.Components, vgcomp)
								vgn = &vugu.VGNode{Component: vgcomp}
								vgparent.AppendChild(vgn)
							}
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t\t"}
							vgparent.AppendChild(vgn)
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "label", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-textfield__label"}, vugu.VGAttribute{Namespace: "", Key: "for", Val: "password"}}}
							vgparent.AppendChild(vgn)
							vgn.SetInnerHTML(vugu.HTML(""))
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t"}
							vgparent.AppendChild(vgn)
						}
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t"}
						vgparent.AppendChild(vgn)
					}
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\t\t"}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-card__actions mdl-card--border"}}}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t"}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-grid"}}}
						vgparent.AppendChild(vgn)
						{
							vgparent := vgn
							_ = vgparent
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t\t"}
							vgparent.AppendChild(vgn)
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "button", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-cell mdl-cell--12-col mdl-button mdl-button--raised mdl-button--colored mdl-js-button mdl-js-ripple-effect mdl-color-text--white"}}}
							vgparent.AppendChild(vgn)
							vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
								EventType:	"click",
								Func:		func(event vugu.DOMEvent) { c.LoginButtonEvent(event) },
								// TODO: implement capture, etc. mostly need to decide syntax
							})
							{
								vgparent := vgn
								_ = vgparent
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t\t\t\tLogin\n\t\t\t\t"}
								vgparent.AppendChild(vgn)
							}
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\t\t\t"}
							vgparent.AppendChild(vgn)
						}
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\n\t\t\t"}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mdl-grid"}}}
						vgparent.AppendChild(vgn)
						vgn.SetInnerHTML(vugu.HTML("\n\t\t\t\t\x3Cdiv class=\"mdl-cell mdl-cell--12-col\"\x3E\n\t\t\t\t\t\x3Ca onclick=\"flip(\x26#34;show-left\x26#34;)\" class=\"mdl-color-text--primary\"\x3ESign up!\x3C/a\x3E\n\t\t\t\t\t\x3Ca onclick=\"flip(\x26#34;show-bottom\x26#34;)\" class=\"mdl-color-text--primary\" style=\"float: right\"\x3ELost\n\t\t\t\t\t\tPassword?\x3C/a\x3E\n\t\t\t\t\x3C/div\x3E\n\t\t\t"))
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t\t"}
						vgparent.AppendChild(vgn)
					}
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t"}
					vgparent.AppendChild(vgn)
				}
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t"}
				vgparent.AppendChild(vgn)
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: "<div class=\"mdl-card mdl-shadow--6dp\">\n\t\t<div class=\"mdl-card__title mdl-color--primary mdl-color-text--white relative\">\n\t\t\t<a class=\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon\"\n\t\t\t\tonClick='flip(\"show-front\")'>\n\t\t\t\t<i class=\"material-icons\">arrow_back</i>\n\t\t\t</a>\n\t\t\t<h2 class=\"mdl-card__title-text\">Sign up</h2>\n\t\t</div>\n\n\n\t\t<div class=\"mdl-card__supporting-text\">\n\t\t\t<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n\t\t\t\t<input class=\"mdl-textfield__input\" id=\"login\"/>\n\t\t\t\t<label class=\"mdl-textfield__label\" for=\"login\">Login</label>\n\t\t\t</div>\n\t\t\t<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n\t\t\t\t<input class=\"mdl-textfield__input\" type=\"password\" id=\"password\"/>\n\t\t\t\t<label class=\"mdl-textfield__label\" for=\"password\">Password</label>\n\t\t\t</div>\n\n\t\t\t<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n\t\t\t\t<input class=\"mdl-textfield__input\" type=\"password\" id=\"password2\"/>\n\t\t\t\t<label class=\"mdl-textfield__label\" for=\"password2\">Password repeat</label>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"mdl-card__actions mdl-card--border\">\n\t\t\t<div class=\"mdl-grid\">\n\t\t\t\t<button class=\"mdl-cell mdl-cell--12-col mdl-button mdl-button--raised mdl-button--colored mdl-js-button mdl-js-ripple-effect mdl-color-text--white\">\n\t\t\t\t\tSign up\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"mdl-card mdl-shadow--6dp\">\n\t\t<div class=\"mdl-card__title mdl-color--primary mdl-color-text--white relative\">\n\t\t\t<a class=\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon\"\n\t\t\t\tonClick='flip(\"show-front\")'>\n\t\t\t\t<i class=\"material-icons\">arrow_back</i>\n\t\t\t</a>\n\t\t\t<h2 class=\"mdl-card__title-text\">Lost Password</h2>\n\t\t</div>\n\n\n\t\t<div class=\"mdl-card__supporting-text\">\n\t\t\t<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n\t\t\t\t<input class=\"mdl-textfield__input\" type=\"email\" id=\"email\"/>\n\t\t\t\t<label class=\"mdl-textfield__label\" for=\"email\">E-Mail</label>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"mdl-card__actions mdl-card--border\">\n\t\t\t<div class=\"mdl-grid\">\n\t\t\t\t<button class=\"mdl-cell mdl-cell--12-col mdl-button mdl-button--raised mdl-button--colored mdl-js-button mdl-js-ripple-effect mdl-color-text--white\">\n\t\t\t\t\tReset Password\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>"}
				vgparent.AppendChild(vgn)
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n"}
				vgparent.AppendChild(vgn)
			}
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "style", Attr: []vugu.VGAttribute(nil)}
			{
				vgn.AppendChild(&vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\nbody {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n", Attr: []vugu.VGAttribute(nil)})
			}
			vgout.AppendCSS(vgn)
		}
	}
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ vjson.RawMessage
var _ js.Value
